Tries radix search tries find many applications in computer science and telecommunications It is assumed that a trie is built over an alphabet Vary trie and n possible infinite strings of elements from U diverses keys are stored in external nodes of the trie The occurrence of an element special in a key is represented by a probability pi asymmetric trie Our main interest is to compute all moments of the depth of a leaf external node in a random family of tries By solving a system of recurrences we find an exact formula for all factorial moments of the depth and using the Mellin transform technique we derive asymptotic approximations for them Definition In computer science a radix tree also radix trie or compact prefix tree is a data structure that represents a space optimized trie prefix tree in which each node that is the only child is merged with its parent The result is that the number of children of every internal node is at most the radix r of the radix tree where r is a positive integer and a power x of two having x more than one Unlike regular tries edges can be labeled with sequences of elements as well as single elements This makes radix trees much more efficient for small sets especially if the strings are long and for sets of strings that share long prefixes Radix trees support insertion deletion and searching operations Insertion adds a new string to the trie while trying to minimize the amount of data stored Deletion removes a string from the trie Searching operations include but are not necessarily limited to exact lookup find predecessor find successor and find all strings with a prefix All of these operations are O where k is the maximum length of all strings in the set where length is measured in the quantity of bits equal to the radix of the radix trie To insert a string we search the tree until we can make no further progress At this point we either add a new outgoing edge labeled with all remaining elements in the input string or if there is already an outgoing edge sharing a prefix with the remaining input string we split it into two edges the first labeled with the common prefix and proceed This splitting step ensures that no node has more children than there are possible string elements
Several cases of insertion are shown below though more may exist Note that r simply represents the root It is assumed that edges can be labelled with empty strings to terminate strings where necessary and that the root has no incoming edge The lookup algorithm described above will not work when using empty string edges To delete a string x from a tree we first locate the leaf representing x Then assuming x exists we remove the corresponding leaf node If the parent of our leaf node has only one other child then that childs incoming label is appended to the parents incoming label and the child is removed

 


